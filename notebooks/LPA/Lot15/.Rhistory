s.summ <- summarySE(sleep, measurevar = 'extra', groupvars = 'group')
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-se, ymax=extra+se), size=.3, width = .2, position = position_dodge(.9))
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-sd, ymax=extra+sd), size=.3, width = .2, position = position_dodge(.9))
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-ci, ymax=extra+ci), size=.3, width = .2, position = position_dodge(.9))
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-se, ymax=extra+se), size=.3, width = .2, position = position_dodge(.9))
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-ci, ymax=extra+ci), size=.3, width = .2, position = position_dodge(.9))
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-sd, ymax=extra+sd), size=.3, width = .2, position = position_dodge(.9))
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-se, ymax=extra+se), size=.3, width = .2, position = position_dodge(.9))
s.summ
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-sd, ymax=extra+sd), size=.3, width = .2, position = position_dodge(.9))
library(Rmisc)
# Data
s.summ <- summarySE(sleep, measurevar = 'extra', groupvars = 'group')
# Plot graph
s.summ %>% ggplot(aes(group, extra, fill=group)) + geom_bar(stat='identity', position = position_dodge()) + geom_errorbar(aes(ymin=extra-sd, ymax=extra+sd), size=.3, width = .2, position = position_dodge(.9))
t.test(extra~group, sleep)
help("var.test")
quarto install tool tinytex
install.packages('tinytex')
train_data <- read.csv("../data/train.csv", header=TRUE) # pixel data
train_data <- as.matrix(train_data)
# exploring train data
head(colnames(train_data), 30) # first column is labels with unique values, rest is pixel cols
# Viewing image of pixels
pix <- matrix(train_data[1,2:ncol(train_data)], 28, 28, byrow = TRUE)
image(t(apply(pix, 2, rev)), col=grey(seq(0,1,length=784)))
28x28
28*28
image(t(apply(pix, 2, rev)), col=grey(seq(0,1)))
image(t(apply(pix, 2, rev)), col=grey(seq(0,1, length=200)))
image(t(apply(pix, 2, rev)), col=grey(seq(0,1, length=784)))
coin <- c("H", "T")
coin
sample(coin, size = 1)
sample(coin, size = 2)
sample(coin, size = 2)
sample(coin, size = 2)
sample(coin, size = 2, prob = c(0.5, 0.5))
sample(coin, size = 2, prob = c(0.5, 0.5))
sample(coin, size = 2, prob = c(0.5, 0.5))
sample(coin, size = 2, prob = c(0.5, 0.5))
sample(coin, size = 2, prob = c(0.5, 0.5))
sample(coin, size = 2, prob = c(0.5, 0.5))
sample(coin, size = 2, prob = c(0.5, 0.5))
sample(coin, size = 2, prob = c(0.5, 0.5))
# Source file and libraries
source("midterm_scripts.R")
library('caret')
library('rpart')
library('neuralnet')
library('dendextend')
library('jpeg')
library('png')
library('dplyr')
hw_data = read.csv('../../data/train.csv')
hw_data = as.matrix(hw_data)
#create a function of conversting a row into an indicidual matrix
matrix_of_handwritten_digit = function(row_of_digits){
#create a matrix of 28x28 and force data from 1X784 to 28X28 matrix. byrow is set to true here and is the key
pixel_matrix = matrix(row_of_digits, nrow = 28, ncol = 28, byrow = TRUE)
return (pixel_matrix)
}
for (i in 1:1){
#create a matrix of 28x28 and force data from 1X784 to 28X28 matrix. byrow is set to true here and is the key
pixel_matrix = matrix_of_handwritten_digit(hw_data[i,2:785])
image(pixel_matrix, col = gray((0:255)/255))
#add a title so that we know which digit it is
title(main = paste('Digit:', hw_data[i,1]))
}
#elimiate all pixel columns where the value is 0 for all rows
hw_data_no_non_var = hw_data[,apply(hw_data, 2, function(x) any(x != 0))]
#run the PCA on hw_data_no_non_var
pca = prcomp(hw_data_no_non_var[,-1], scale = TRUE)
mnist_norm<-as.matrix(hw_data[,-1])/255
mnist_norm_cov <- cov(hw_datat_norm_cov <- cov(mnist_norm)
pca <- prcomp(mnist_norm_cov)
mnist_norm_cov <- cov(hw_datat_norm_cov) <- cov(mnist_norm)
mnist_norm_cov <- cov(mnist_norm)
pca <- prcomp(mnist_norm_cov)
trainlabel <- hw_data[,1]
trainlabel
head(pca$x)
dataset <- pca$x
dataset$label <- trainlabel
head(dataset)
head(dataset)
dataset
pca$x
autoplot(pca, colour=trainlabel)
ggplot(as.data.frame(pca$x), aes(x=PC1, y=PC2, colour=trainlabel))
ggplot(as.data.frame(pca$x), aes(x=PC1, y=PC2, colour=trainlabel))
ggplot(as.data.frame(pca$x), aes(x=PC1, y=PC2, colour=trainlabel)) + geom_text(aes(label=trainlabel))
iris[1:4]
head(iris[1:4])
autoplot(pca, data=hw_data, colour='label')
autoplot(pca, data=hw_data, colour=trainlabel)
autoplot(pca, data=hw_data, colour='label')
autoplot(pca)
pca <- prcomp(mnist_norm_cov, scale=T)
#run the PCA on hw_data_no_non_var
pca = prcomp(hw_data_no_non_var[,-1], scale = TRUE)
autoplot(pca, data=hw_data, colour='label')
fortify(pca)
fortify(as.data.frame(pca))
autoplot(pca)
head(pca)
autoplot(pca$x, data=hw_data, colour='label')
ggplot2::autoplot(pca, data=hw_data, colour='label')
library('caret')
library('rpart')
library('neuralnet')
library('dendextend')
library('jpeg')
library('png')
library('dplyr')
library(ggplot2)
autoplot(pca, data=hw_data, colour='label')
mnist_norm_cov
# I want 3 clusters
#Reducing features using PCA
mnist_norm<-as.matrix(hw_data[,-1])/255
mnist_norm_cov <- cov(mnist_norm)
autoplot(pca)
#final matrix is below:
# (pca$x[,1:26])
# I want 3 clusters
#Reducing features using PCA
mnist_norm<-as.matrix(hw_data[,-1])/255
mnist_norm_cov <- cov(mnist_norm)
pca <- prcomp(mnist_norm_cov, scale=T)
biplot(pca, scale=0)
pca <- prcomp(mnist_norm_cov)
autoplot(pca)
help(autoplot)
??autoplot
library(ggfortify)
autoplot(pca)
head(hw_data)
autoplot(pca, data=hw_data, colour='label', label=T)
autoplot(pca, data=hw_data, colour='label')
dim(pca)
dim(pca$x)
hw_data[,1:784]
autoplot(pca, data=hw_data[,1:784], colour='label')
nrow(hw_data)
nrow(hw_data[,1:784])
nrow(hw_data[1:784,])
autoplot(pca, data=hw_data[1:784,], colour='label')
autoplot(pca, data=hw_data[1:784,], colour='label', scale=0)
autoplot(pca, data=hw_data[1:784,], color=label, scale=0)
autoplot(pca, data=hw_data[1:784,], color='label', scale=0)
autoplot(pca, data=hw_data[1:784,], colour=label, scale=0)
autoplot(pca, data=hw_data[1:784,], colour='label', scale=0)
autoplot(pca, data=hw_data[1:784,], colour='label', label=T, scale=0)
pca1 <- prcomp(mnist_norm_cov)
#run the PCA on hw_data_no_non_var
pca = prcomp(hw_data_no_non_var[,-1], scale = TRUE)
pca <- prcomp(hw_data[,-1], scale=T)
pca = prcomp(hw_data_no_non_var[,-1], scale = TRUE)
trainlabel <- as.factor(hw_data[,1])
length(trainlabel)
autoplot(pca, data=hw_data[1:784,], colour=trainlabel[1:784,], label=T, scale=0)
autoplot(pca, data=hw_data, colour=trainlabel, label=T, scale=0)
#plot the pca values by labels to see if there is any clustering
plot(pca$x[,1:2], col = hw_data_no_non_var[,1], pch = 20, cex = 1)
#add a legend
legend("topright", legend = 0:9, col = 1:10, pch = 20, cex = 1)
autoplot(pca, data=hw_data, colour=label, label=T, scale=0)
autoplot(pca, data=hw_data, colour='label', scale=0)
hw_data[,1] <- as.factor(hw_data[,1])
autoplot(pca, data=hw_data, colour='label', scale=0)
#Reducing features using PCA
train_norm<-as.matrix(train[,-1])
train_norm_cov <- cov(train_norm) # getting covariance
train <- read.csv('../data/train.csv')
#Reducing features using PCA
train_norm<-as.matrix(train[,-1])
train_norm_cov <- cov(train_norm) # getting covariance
pca <- prcomp(train_norm_cov)
#plot the pca values by labels to see if there is any clustering
plot(pca$x[,1:2], col = train[,1], pch = 20, cex = 1)
#add a legend
legend("topright", legend = 0:9, col = 1:10, pch = 20, cex = 1)
pca <- prcomp(train_norm, scale=T)
pca <- prcomp(train_norm_cov, scale=T)
pca <- prcomp(train_norm_cov)
autoplot(pca)
head(train_norm)
head(na.omit(train_norm))
#Reducing features using PCA
train_mat<-as.matrix(train[,-1])
train_mat[train_mat==0]
train_mat[train_mat==0] <- NA
train_clean <- na.omit(train_mat)
train_clean
head(train_clean)
head(train_clean)
train_clean
pca <- prcomp(train_clean)
dim(train_clean)
pca <- prcomp(train_mat)
#elimiate all pixel columns where the value is 0 for all rows
train_clean = train_mat[,apply(train_mat, 2, function(x) any(x != 0))]
#elimiate all pixel columns where the value is 0 for all rows
train_clean = train_mat[,apply(train_mat, 2, function(x) any(x != 0))]
#Reducing features using PCA
train_mat<-as.matrix(train[,-1])
#elimiate all pixel columns where the value is 0 for all rows
train_clean = train_mat[,apply(train_mat, 2, function(x) any(x != 0))]
#elimiate all pixel columns where the value is 0 for all rows
train_clean = train[,apply(train, 2, function(x) any(x != 0))]
#run the PCA on hw_data_no_non_var
pca = prcomp(train_clean, scale = TRUE)
#plot the pca values by labels to see if there is any clustering
plot(pca$x[,1:2], col = train[,1], pch = 20, cex = 1)
#add a legend
legend("topright", legend = 0:9, col = 1:10, pch = 20, cex = 1)
plot.new()
plot(pca$x[,1:2], col = train[,1], pch = 20, cex = 1); legend("topright", legend = 0:9, col = 1:10, pch = 20, cex = 1)
dim(pca$x)
dim(train)
dist_matrix = dist(t(hw_data[,-1]), method = "euclidean")
hclustering_distance = hclust(dist_matrix, method = "average")
setwd("~/Documents/LPA/Ligation Efficiency QC")
setwd("~/Documents/LPA/Ligation Efficiency QC/Lot15")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/LPA/Ligation Efficiency QC/Lot15")
manual <- read.table('manualbuild15_adapter_ligation.tsv')
auto <- read.table('autobuild15_adapter_ligation.tsv')
auto
manual <- read.table('manualbuild15_adapter_ligation.tsv', header=T)
auto <- read.table('autobuild15_adapter_ligation.tsv', header=T)
manual <- read.table('manualbuild15_adapter_ligation.tsv', header=T)
auto <- read.table('autobuild15_adapter_ligation.tsv', header=T)
auto
library(dplyr)
hypo <- auto %>% group_by(partition) %>% median(lig_efficiency)
hypo <- auto %>% group_by(partition) %>% median(lig_efficiency)
hypo <- auto %>% group_by(partition)# %>% median(lig_efficiency)
hypo
auto %>% group_by(partition) %>% mutate(median_lig_efficiency = median(lig_efficiency))
auto %>% group_by(partition) %>% mutate(median_lig_efficiency = median(lig_efficiency)) %>% arrange(by_group=partition)
auto %>% group_by(partition)  %>% arrange(by_group=partition)%>% mutate(median_lig_efficiency = median(lig_efficiency))
manual_results <- manual %>% group_by(partition)  %>% arrange(by_group=partition)%>% mutate(median_lig_efficiency = median(lig_efficiency))
manual_results
ggplot2(auto, aes(x=partition, y=lig_efficiency, color=partition)) + geom_point()
library(ggplot2)
ggplot2(auto, aes(x=partition, y=lig_efficiency, color=partition)) + geom_point()
library(ggplot2)
ggplot2(auto, aes(x=partition, y=lig_efficiency, color=partition)) + geom_point()
ggplot(auto, aes(x=partition, y=lig_efficiency, color=partition)) + geom_point()
ggplot(auto, aes(x=partition, y=lig_efficiency, color=partition)) + geom_box()
ggplot(auto, aes(x=partition, y=lig_efficiency, color=partition)) + geom_boxplot()
ggplot(manual, aes(x=partition, y=lig_efficiency, color=partition)) + geom_boxplot()
p2
library(ggplot2)
p1 <- ggplot(auto, aes(x=partition, y=lig_efficiency, color=partition)) + geom_boxplot()
p2 <- ggplot(manual, aes(x=partition, y=lig_efficiency, color=partition)) + geom_boxplot()
p1
p2
merge(p1, p2)
merge(auto, manual)
cbind(auto, manual)
rbind(auto, manual)
cbind(auto, manual)
auto_results <- auto %>% group_by(partition)  %>% arrange(by_group=partition)%>% mutate(median_lig_efficiency = median(lig_efficiency), group="auto")
manual_results <- manual %>% group_by(partition)  %>% arrange(by_group=partition)%>% mutate(median_lig_efficiency = median(lig_efficiency), group="manual")
merge(manual_results, auto_results, by = group)
merge(manual_results, auto_results, by = 'group')
rbind(manual_results, auto_results)
ggplot(merged, aes(x=partition, y=lig_efficiency, group=group))
ggplot(merged, aes(x=partition, y=lig_efficiency, group=group)) + geom_point()
merged <- rbind(manual_results, auto_results)
ggplot(merged, aes(x=partition, y=lig_efficiency, group=group)) + geom_point()
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_point()
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot()
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15')
t.test(auto_results$lig_efficiency, manual_results$lig_efficiency, paired=F)
summary(ttest)
ttest <- t.test(auto_results$lig_efficiency, manual_results$lig_efficiency, paired=F)
summary(ttest)
merged %>% group_by(partition, group)
merged %>% group_by(partition, group) %>% get_summary_stats(lig_efficiency, type="mean_sd")
library(tidyverse)
library(rstatix)
library(ggpubr)
merged %>% group_by(partition, group) %>% get_summary_stats(lig_efficiency, type="mean_sd")
library(tidyverse)
library(rstatix)
library(ggpubr)
merged %>% group_by(partition) %>% get_summary_stats(lig_efficiency, type="mean_sd")
merged %>% group_by(partition, group) %>% get_summary_stats(lig_efficiency, type="mean_sd")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + stat_pvalue_manual(label = "p.adj", tip.length = 0, step.increase = 0.1)
merged %>% group_by(partition, group) %>% get_summary_stats(lig_efficiency, type="mean_sd") %>% add_xy_position(x='group')
merged %>% group_by(partition, group) %>% get_summary_stats(lig_efficiency, type="mean_sd") %>% add_xy_position(x='partition')
# %>% get_summary_stats(lig_efficiency, type="mean_sd")
merged %>% group_by(partition, group) %>% add_xy_position(x='partition')
# %>% get_summary_stats(lig_efficiency, type="mean_sd")
merged %>% group_by(partition, group) %>% add_xy_position(x=partition)
# %>% get_summary_stats(lig_efficiency, type="mean_sd")
merged %>% group_by(partition, group) %>% add_xy_position(x=group)
merged %>% group_by(partition, group) %>% get_summary_stats(lig_efficiency, type="mean_sd")
merged %>% group_by(partition, group) %>% pairwise_t_test(lig_efficiency)
merged %>% group_by(partition, group) %>% pairwise_t_test(lig_efficiency)
merged %>% group_by(partition, group) %>% pairwise_t_test(lig_efficiency~group)
merged %>% group_by(partition) %>% pairwise_t_test(lig_efficiency~group)
merged <- rbind(manual_results, auto_results)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15')
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red')
stats_out <- merged %>% group_by(partition) %>% pairwise_t_test(lig_efficiency~group)
stats_out
View(stats_out)
View(stats_out)
View(stats_out)
View(stats_out)
View(stats_out)
View(stats_out)
View(stats_out)
View(stats_out)
View(stats_out)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +  stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test")
stats_out <- merged %>% group_by(partition) %>% t_test(lig_efficiency~group)
stats_out
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test") +geom_text(show.legend = FALSE)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test") + geom_text(show.legend = FALSE)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test") + geom_text(show_guide = FALSE)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test") + geom_text(show.legend = FALSE)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test") + geom_text(show.legend = F)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test") + guide_legend(override.aes = aes(label = ""))
fill = guide_legend(
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test") + guides(fill = guide_legend(override.aes = aes(label = ""))
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() + ggtitle('LPA: Automatic vs. Manual build of LPA15') + geom_hline(yintercept = 50, linetype='dashed', color='red') +stat_compare_means(method = "t.test") + guides(fill = guide_legend(override.aes = aes(label = ""))
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test") +
guides(fill = guide_legend(override.aes = aes(label=""))
)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test") +
guides(fill = guide_legend(override.aes = aes(label="")))
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test") +
geom_text(aes(label=group), show_guide = F)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test") +
geom_text(aes(label=group), show_guide = F)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test") +
geom_text(aes(), show_guide = F)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test") +
geom_text(show_guide = F)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test") +
geom_text(aes(label=""), show_guide = F)
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test") +
geom_text(aes(label=""), show_guide = FALSE)
help(t_test)
stats_out <- merged %>% group_by(partition) %>% t_test(lig_efficiency~group, detailed=T)
stats_out
plot(stats_out)
stats_out
stats_out <- merged %>% group_by(partition) %>% t_test(lig_efficiency~group) %>% add_significance
stats_out
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group), legend=F) + geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group, label='')) +
geom_text(show.legend = FALSE) +
geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group, label=none)) +
geom_text(show.legend = FALSE) +
geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group, label=group)) +
geom_text(show.legend = FALSE) +
geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group, label="")) +
geom_text(show.legend = FALSE) +
geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group, label="")) +
geom_text(aes(label=""), show.legend = FALSE) +
geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
#geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
#geom_hline(yintercept = 50, linetype='dashed', color='red') +
#stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, color=group)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, fill=group)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, fill=group,color=group)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, fill=group)) +
geom_boxplot() +
#ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
merged %>% group_by(partition) %>% t_test(lig_efficiency~group) %>% add_significance
merged %>% group_by(partition) %>% t_test(lig_efficiency~group) %>% add_significance()
ggplot(merged, aes(x=partition, y=lig_efficiency, fill=group)) +
geom_boxplot() +
ggtitle('LPA: Automatic vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
ggplot(merged, aes(x=partition, y=lig_efficiency, fill=group)) +
geom_boxplot() +
ggtitle('LPA: Automated vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
merged %>% get_summary_stats(lig_efficiency~group, type = "mean_sd")
merged %>% get_summary_stats(lig_efficiency, type = "mean_sd")
merged %>% group_by(group) %>% get_summary_stats(lig_efficiency, type = "mean_sd")
merged %>% group_by(partition, group) %>% get_summary_stats(lig_efficiency, type = "mean_sd")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/LPA/Ligation Efficiency QC/Lot15")
library(dplyr)
# get the median for each partition
auto_results <- auto %>% group_by(partition)  %>% arrange(by_group=partition)%>% mutate(median_lig_efficiency = median(lig_efficiency), group="auto")
manual_results <- manual %>% group_by(partition)  %>% arrange(by_group=partition)%>% mutate(median_lig_efficiency = median(lig_efficiency), group="manual")
merged <- rbind(manual_results, auto_results)
merged
manual <- read.table('manualbuild15_adapter_ligation.tsv', header=T)
auto <- read.table('autobuild15_adapter_ligation.tsv', header=T)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/LPA/Ligation Efficiency QC/Lot15")
library(ggplot2)
library(ggpubr)
ggplot(merged, aes(x=partition, y=lig_efficiency, fill=group)) +
geom_boxplot() +
ggtitle('LPA: Automated vs. Manual build of LPA15') +
geom_hline(yintercept = 50, linetype='dashed', color='red') +
stat_compare_means(method = "t.test")
library(rstatix)
library(ggpubr)
stats_out <- merged %>% group_by(partition) %>% t_test(lig_efficiency~group) %>% add_significance()
stats_out
merged %>% group_by(partition, group) %>% get_summary_stats(lig_efficiency, type = "mean_sd")
